{{#allParams}}{{#useBeanValidation}}{{#isBodyParam}}			@javax.validation.Valid
{{/isBodyParam}}{{#pattern}}			@javax.validation.constraints.Pattern(regexp = "{{{pattern}}}")
{{/pattern}}{{#required}}{{^isPathParam}}			@javax.validation.constraints.NotNull
{{/isPathParam}}{{/required}}{{#minimum}}{{#isInteger}}			@javax.validation.constraints.Min({{minimum}})
{{/isInteger}}{{#isLong}}			@javax.validation.constraints.Min({{minimum}})
{{/isLong}}{{^isInteger}}{{^isLong}}			@javax.validation.constraints.DecimalMin(value = "{{minimum}}", inclusive = {{#exclusiveMinimum}}false{{/exclusiveMinimum}}{{^exclusiveMinimum}}true{{/exclusiveMinimum}})
{{/isLong}}{{/isInteger}}{{/minimum}}{{#maximum}}{{#isInteger}}			@javax.validation.constraints.Max({{maximum}})
{{/isInteger}}{{#isLong}}			@javax.validation.constraints.Max({{maximum}})
{{/isLong}}{{^isInteger}}{{^isLong}}			@javax.validation.constraints.DecimalMax(value = "{{maximum}}", inclusive = {{#exclusiveMaximum}}false{{/exclusiveMaximum}}{{^exclusiveMaximum}}true{{/exclusiveMaximum}})
{{/isLong}}{{/isInteger}}{{/maximum}}{{#minLength}}{{^maxLength}}			@javax.validation.constraints.Size(min = {{minLength}})
{{/maxLength}}{{/minLength}}{{^minLength}}{{#maxLength}}			@javax.validation.constraints.Size(max = {{maxLength}})
{{/maxLength}}{{/minLength}}{{#minLength}}{{#maxLength}}			@javax.validation.constraints.Size(min = {{minLength}}, max = {{maxLength}})
{{/maxLength}}{{/minLength}}{{/useBeanValidation}}{{^required}}{{^isBodyParam}}			@javax.annotation.Nullable
{{/isBodyParam}}{{/required}}{{#isQueryParam}}			@io.micronaut.http.annotation.QueryValue{{^isContainer}}(value = "{{baseName}}"{{#defaultValue}}, defaultValue = "{{defaultValue}}"{{/defaultValue}}){{/isContainer}}
{{/isQueryParam}}{{#isBodyParam}}			@io.micronaut.http.annotation.Body
{{/isBodyParam}}{{#isPathParam}}			@io.micronaut.http.annotation.PathVariable(name = "{{baseName}}"{{#defaultValue}}, defaultValue = "{{defaultValue}}"{{/defaultValue}})
{{/isPathParam}}{{#isHeaderParam}}			@io.micronaut.http.annotation.Header("{{baseName}}")
{{/isHeaderParam}}{{#isDateTime}}			@io.micronaut.core.convert.format.Format("uuuu-MM-dd'T'HH:mm:ss[.SSS][xxx][xx][X]")
{{/isDateTime}}{{#isDate}}			@io.micronaut.core.convert.format.Format("uuuu-MM-dd")
{{/isDate}}			{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}} {{paramName}}{{#hasMore}},
{{/hasMore}}{{/allParams}}